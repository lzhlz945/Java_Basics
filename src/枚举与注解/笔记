枚举：
有限个的确定的为枚举类；
建议：定义一组常量时；
若枚举类只有一个对象作为单例模式使用
利用enum常量创建
创建方式：
1、
class Session{
    private  final String name;
    private  final String  desc;

    private Session(String name,String desc) {
        this.name=name;
        this.desc = desc;
    }
    public static final Session SPRING=new Session("春天","春暖花开");
    public static final Session SUMMER=new Session("春天","春暖花开");
    public static final Session AUTUMN=new Session("春天","春暖花开");
    public static final Session WINTER=new Session("春天","春暖花开");

    public String getName() {
        return name;
    }

    public String getDesc() {
        return desc;
    }

    @Override
    public String toString() {
        return "Session{" +
                "name='" + name + '\'' +
                ", desc='" + desc + '\'' +
                '}';
    }
之前的创建方式 构造器私有化，成员变量被private final修饰只有get()方法；
实例化对象在类中被public static final 修饰

2、
enum xxx{
SPRING("春天","春暖花开"),
      SUMMER("夏天","春暖花开"),
      AUTUMN("秋天","春暖花开"),
      WINTER("冬天","春暖花开");
     private  final String name;
     private  final String  desc;
//
    private Session1(String name,String desc) {
        this.name=name;
        this.desc = desc;
    }
}
第二种定义这个类是枚举的 他的父类就是Enum
不需要再写toSting() ，再类中
public static final Session SPRING=new Session("春天","春暖花开");
SUMMER("夏天","春暖花开"),
切写在类的开始以“，”间隔，以“；”分开;

Enum属性
values():
列举所有常量名称
1、toString():
2、values()：返回Enum的所有对象
3、valueOf(String name)：返回对象名是name的枚举对象；

枚举实现抽象方法步骤：
1、定义一个抽象类：抽象方法void xx();
2、在枚举类中的“,”号之前加上{}，在{}这里面写上实现的抽象方法，这可以更改枚举的内容
3、用枚举类名.show（）;即可展示重写的抽象方法的内容；